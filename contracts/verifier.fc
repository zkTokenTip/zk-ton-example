#include "imports/stdlib.fc";

const op::verify = "op::verify"c;
const int P1_SIZE = 48 * 8;
const int P2_SIZE = 96 * 8;

const slice IC0 = "ac0e607fb57156f882b798ce3195574278f61cf21828d5f2cf42e55300f108ecd817614e60180867e1f65749f11c71de"s;
const slice IC1 = "b111848794e58b53a7bbf693850a7b0bff6b07092d91f3696974ea4dda64d27c8a3e8b3894f570e48c4adbe25aec6567"s;

const slice vk_gamma_2 = "93e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8"s;
const slice vk_delta_2 = "804ca21d3c8d9a58e7a63e7fb564fee76892d3f5839571d05b2243e10d848a01db45920feb1f18caef59b60cef77b76700af100aa037c1a30316d6f9341566143f9c1ab4db82677ae29ac147b7d31b9f6c8e17c235b5b3511a20880ad2b9a5e2"s;
const slice vk_alpha_1 = "b830008ceed707a79fb554918ab9158ea9a9251d9a8333155ef52b0b9d712f03fa1eae9ed8e21f9d2beaea735c8766a9"s;
const slice vk_beta_2  = "89c29649fd447cedcd7bb3f619f32a3bea8249e928809cc37320a5528c958728c4f43a18d29fe478ee3e1b9ccee362c80cc4144a269e81594665fca33acfe73e97be3089cf02edd226ebeafd104a0de5b21334a82ff12282d040fa1f8191d3a9"s;

slice bls_g1_add(slice x, slice y) asm "BLS_G1_ADD";
slice bls_g1_neg(slice x) asm "BLS_G1_NEG";
slice bls_g1_multiexp(
    slice x1, int y1,
    int n
) asm "BLS_G1_MULTIEXP";
int bls_pairing(slice x1, slice y1, slice x2, slice y2, slice x3, slice y3, slice x4, slice y4, int n) asm "BLS_PAIRING";

(slice, slice) load_p1(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p1 = first_bits(s, P1_SIZE);
    s~skip_bits(P1_SIZE);
    return (s, p1);
}

(slice, slice) load_p2(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    slice p2 = first_bits(s, P2_SIZE);
    s~skip_bits(P2_SIZE);
    return (s, p2);
}

(slice, int) load_newint(slice body) impure {
    cell c = body~load_ref();
    slice s = c.begin_parse();
    int x = s~load_uint(256);
    return (s, x);
}

(int) groth16Verify(
    slice pi_a,
    slice pi_b,
    slice pi_c,
    int pubInput0
) impure {
    int res = 0;
    slice cpub = bls_g1_multiexp(
        IC1, pubInput0,
        1
    );
    cpub = bls_g1_add(cpub, IC0);

    slice pi_a_neg = bls_g1_neg(pi_a);
    int a = bls_pairing(
        cpub,       vk_gamma_2,
        pi_a_neg,   pi_b,
        pi_c,       vk_delta_2,
        vk_alpha_1, vk_beta_2,
        4
    );

    if (a == 0) {
        res = 0;
    } else {
        res = 1;
    }
    return (res);
}

(int) verify(
    slice in_msg_body
) impure {
    slice pi_a = in_msg_body~load_p1();
    slice pi_b = in_msg_body~load_p2();
    slice pi_c = in_msg_body~load_p1();
    int pubInput0 = in_msg_body~load_newint();

    return groth16Verify(
        pi_a,
        pi_b,
        pi_c,
        pubInput0
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::verify) {
        int res = verify(in_msg_body);
        return ();
    }
    throw(0xffff);
}

int get_verify(
    slice pi_a,
    slice pi_b,
    slice pi_c,
    int pubInput0
) method_id {
    return groth16Verify(
        pi_a,
        pi_b,
        pi_c,
        pubInput0
    );
}
